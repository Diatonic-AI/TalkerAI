---
alwaysApply: false
---
- Use functional components and hooks for state management
- Leverage React's Context API for global state management
- Optimize performance with React.memo and useMemo
- Implement PropTypes or TypeScript for type checking
- Use error boundaries to catch JavaScript errors in components

---
name: redux-best-practices.mdc
description: Best practices for Redux state management
globs: **/*.{ts,tsx,js,jsx}
---

- Use Redux Toolkit for simplified store setup and reducers
- Normalize state shape to avoid deeply nested structures
- Use selectors for accessing state to improve performance
- Implement middleware for side effects (e.g., redux-thunk)
- Keep actions and reducers pure and predictable

---
name: nextjs-best-practices.mdc
description: Best practices for Next.js applications and routing
globs: **/*.{ts,tsx}
---

- Use the App Router for better performance
- Implement proper error boundaries
- Use proper data fetching patterns with suspense
- Optimize images with the Next.js Image component
- Utilize static site generation (SSG) and server-side rendering (SSR) effectively

---
name: typescript-best-practices.mdc 
description: TypeScript coding standards and type safety guidelines
globs: **/*.{ts,tsx}
---

- Use strict null checks
- Prefer interface over type for object shapes
- Use type guards and assertions for better type safety
- Implement proper type inference to reduce redundancy
- Keep types organized in separate files or folders

---
name: tailwindcss-best-practices.mdc
description: Best practices for styling with Tailwind CSS
globs: **/*.{ts,tsx,css}
---

- Use utility-first classes for rapid styling
- Create custom components for reusable styles
- Leverage responsive design features of Tailwind
- Use JIT mode for faster build times and on-demand styles
- Maintain a consistent design system with Tailwind's configuration

---
name: jest-best-practices.mdc
description: Best practices for testing with Jest
globs: **/*.{ts,tsx,js,jsx}
---

- Write unit tests for all components and functions
- Use snapshot testing for React components
- Mock external dependencies to isolate tests
- Organize tests in a dedicated folder structure
- Use descriptive test names for clarity

---
name: eslint-best-practices.mdc
description: Best practices for code linting with ESLint
globs: **/*.{ts,tsx,js,jsx}
---

- Use a consistent configuration across the project
- Enable TypeScript support with the appropriate parser
- Set up rules for code style and best practices
- Integrate ESLint with your IDE for real-time feedback
- Regularly update dependencies to leverage new rules and features

---
name: jest-best-practices.mdc
description: Best practices for testing with Jest
globs: **/*.{ts,tsx,js,jsx}
---

- Write unit tests for all components and functions
- Use snapshot testing for React components
- Mock external dependencies to isolate tests
- Organize tests in a dedicated folder structure
- Use descriptive test names for clarity

---
name: axios-best-practices.mdc
description: Best practices for making HTTP requests with Axios
globs: **/*.{ts,tsx,js,jsx}
---

- Create an Axios instance for centralized configuration
- Use interceptors for request and response handling
- Handle errors gracefully with try/catch blocks
- Use async/await for cleaner asynchronous code
- Validate responses and handle unexpected data formats

---
name: express-best-practices.mdc
description: Best practices for building APIs with Express
globs: **/*.{ts,tsx,js,jsx}
---

- Use middleware for modular and reusable code
- Implement proper error handling middleware
- Validate and sanitize user inputs with libraries like Joi
- Use environment variables for configuration
- Structure routes logically and keep controllers thin

---
name: mongodb-best-practices.mdc
description: Best practices for using MongoDB with Node.js
globs: **/*.{ts,tsx,js,jsx}
---

- Use Mongoose for schema validation and modeling
- Implement proper indexing for performance optimization
- Use transactions for multi-document operations
- Validate inputs before database operations
- Regularly back up your database and monitor performance

--- 

Feel free to adjust the globs and practices based on your specific project needs!
