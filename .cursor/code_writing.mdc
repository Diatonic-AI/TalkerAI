# Talk++ Multi-Language Development Guidelines

## Rust Development (Primary Language)
- Use `Result<T, E>` for error handling, never panic in production code
- Prefer `&str` over `String` for function parameters when possible
- Use `#[derive(Debug, Clone, Serialize, Deserialize)]` for data structures
- Implement `Default` trait for configuration structs
- Use `anyhow::Result` for application errors, `thiserror::Error` for library errors
- Prefer async/await over blocking operations
- Use `tracing` for structured logging, not `println!`
- Follow Rust naming conventions: snake_case for variables/functions, PascalCase for types

## Talk++ DSL Development
- Keep DSL syntax natural and English-like
- Use clear keywords: `if`, `then`, `else`, `when`, `using`, `with`
- Support both singular and plural action verbs (send/sends, store/stores)
- Validate DSL syntax early with comprehensive error messages
- Provide line/column information in all error messages
- Support comments in DSL files using `//` syntax

## Compiler Architecture
- Separate lexing, parsing, and code generation phases clearly
- Use `logos` for tokenization with proper error handling
- Build recursive descent parser with clear error recovery
- Generate clean, idiomatic code for target languages
- Include debugging information in generated code when in debug mode
- Validate generated code syntax before output

## Multi-Language Code Generation
- **Rust**: Generate async functions with proper error handling
- **Python**: Use type hints and async/await patterns
- **JavaScript**: Generate modern ES6+ with proper error handling  
- **TypeScript**: Include full type definitions and interfaces
- **Bash**: Use set -euo pipefail and proper error checking
- Always include appropriate imports/dependencies for target language
- Generate consistent function signatures across languages

## Service Integration Patterns
- Use builder pattern for service configurations
- Implement mock/dry-run modes for all external services
- Provide clear error messages for service failures
- Support environment variable configuration
- Log all external service calls with structured data

## CLI Development
- Use `clap` with derive macros for argument parsing
- Provide colored output with `colored` crate
- Include progress indicators for long operations
- Support both verbose and quiet modes
- Always validate input files before processing

## Testing & Validation
- Write unit tests for lexer, parser, and code generator separately
- Include integration tests with real DSL examples
- Test error handling paths with invalid input
- Benchmark parser performance with criterion
- Test generated code compilation in target languages

## Error Handling Standards
```rust
// Good: Specific error types with context
#[derive(Error, Debug)]
pub enum CompilerError {
    #[error("Parse error at line {line}, column {col}: {msg}")]
    ParseError { line: usize, col: usize, msg: String },
}

// Good: Propagate errors with context
fn compile_source(source: &str) -> Result<String, CompilerError> {
    let tokens = tokenize(source)
        .map_err(|e| CompilerError::LexError { 
            position: e.position, 
            message: e.to_string() 
        })?;
    // ...
}
```

## Async/Await Patterns
```rust
// Good: Proper async function design
pub async fn execute_function(
    &self, 
    function_id: Uuid, 
    event: Event
) -> Result<Response> {
    tracing::info!("Executing function: {}", function_id);
    
    let result = self.runtime
        .execute(function_id, event)
        .await
        .map_err(|e| anyhow!("Execution failed: {}", e))?;
        
    Ok(result)
}
```

## Documentation Standards
- Use `///` doc comments for public APIs
- Include examples in doc comments where helpful
- Document all public structs and their fields
- Explain DSL syntax in module-level docs
- Keep README.md updated with current features

---


Feel free to adjust the globs and practices based on your specific project needs!
