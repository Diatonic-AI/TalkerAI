# Rust Development Guidelines for Talk++

## Crate Organization & Workspace Management

### Workspace Structure
```toml
[workspace]
members = [
    "compiler",    # Core DSL compiler
    "runtime",     # Execution engine  
    "auth",        # Authentication
    "executor",    # Function execution
    "simulator",   # Dry-run testing
    "wrappers",    # Language wrappers
    "cli",         # Command-line tools
    "api-server",  # REST API
    "frontend-server" # Web UI
]
```

### Dependency Management
- Use workspace dependencies for shared crates (tokio, serde, anyhow)
- Pin exact versions for stability (`= "1.0.0"`)
- Group dependencies logically in Cargo.toml
- Use feature flags for optional functionality

## Error Handling Patterns

### Compiler Errors
```rust
use thiserror::Error;

#[derive(Error, Debug)]
pub enum CompilerError {
    #[error("Lexical error at position {position}: {message}")]
    LexicalError { position: usize, message: String },
    
    #[error("Parse error at line {line}, column {column}: {message}")]
    ParseError { line: usize, column: usize, message: String },
    
    #[error("Code generation error: {message}")]
    CodeGenError { message: String },
}

// Provide helpful constructors
impl CompilerError {
    pub fn lexical(position: usize, message: impl Into<String>) -> Self {
        Self::LexicalError { position, message: message.into() }
    }
}
```

### Runtime Errors
```rust
use anyhow::{Result, Context};

// Good: Application-level error handling
pub async fn execute_function(id: Uuid) -> Result<Response> {
    let function = load_function(id)
        .await
        .with_context(|| format!("Failed to load function {}", id))?;
        
    let result = runtime.execute(function)
        .await
        .context("Function execution failed")?;
        
    Ok(result)
}
```

## Async/Await Best Practices

### Runtime Functions
```rust
// Good: Proper async function design
impl Runtime {
    pub async fn deploy(&mut self, code: &str, metadata: FunctionMetadata) -> Result<Uuid> {
        tracing::info!("Deploying function: {}", metadata.name);
        
        // Validate first (fast operation)
        self.validate_code(code)?;
        
        // Then perform async operations
        let compiled = self.compile_async(code).await?;
        let id = self.store_function(compiled, metadata).await?;
        
        tracing::info!("Successfully deployed function: {}", id);
        Ok(id)
    }
}
```

### CLI Operations
```rust
// Good: CLI with async runtime
use tokio;

#[tokio::main]
async fn main() -> Result<()> {
    let args = Args::parse();
    
    match args.command {
        Command::Build { input, output } => {
            build_command(input, output).await
        }
        Command::Simulate { input, config } => {
            simulate_command(input, config).await
        }
    }
}
```

## Data Structure Design

### Serializable Types
```rust
use serde::{Deserialize, Serialize};
use uuid::Uuid;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct FunctionMetadata {
    pub id: Uuid,
    pub name: String,
    pub language: TargetLanguage,
    pub version: String,
    pub created_at: chrono::DateTime<chrono::Utc>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum TargetLanguage {
    Rust,
    Python,
    JavaScript,
    TypeScript,
    Bash,
}
```

### Configuration Structs
```rust
// Good: Builder pattern with defaults
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CompilerConfig {
    pub target_language: TargetLanguage,
    pub optimization_level: OptimizationLevel,
    pub debug_mode: bool,
}

impl Default for CompilerConfig {
    fn default() -> Self {
        Self {
            target_language: TargetLanguage::Rust,
            optimization_level: OptimizationLevel::Debug,
            debug_mode: true,
        }
    }
}
```

## Parser & Compiler Patterns

### Token Definitions (Logos)
```rust
#[derive(Logos, Debug, Clone, PartialEq)]
pub enum Token {
    #[token("if")]
    If,
    
    #[token("then")]
    Then,
    
    #[regex(r"[a-zA-Z_][a-zA-Z0-9_]*", |lex| lex.slice().to_owned())]
    Identifier(String),
    
    #[regex(r#""([^"\\]|\\.)*""#, |lex| {
        let s = lex.slice();
        s[1..s.len()-1].to_owned() // Remove quotes
    })]
    String(String),
    
    #[error]
    Error,
}
```

### Recursive Descent Parser
```rust
impl Parser {
    fn parse_conditional(&mut self) -> Result<ConditionalStatement, CompilerError> {
        self.consume(Token::If)?;
        let condition = self.parse_condition()?;
        self.consume(Token::Then)?;
        let then_actions = self.parse_actions()?;
        
        let else_actions = if self.check(&Token::Else) {
            self.advance();
            Some(self.parse_actions()?)
        } else {
            None
        };
        
        Ok(ConditionalStatement {
            condition,
            then_actions,
            else_actions,
        })
    }
}
```

## Testing Patterns

### Unit Tests
```rust
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_tokenize_simple_conditional() {
        let input = "if new user registers then validate email";
        let tokens = tokenize(input).unwrap();
        
        assert_eq!(tokens[0].token, Token::If);
        assert_eq!(tokens[1].token, Token::Identifier("new".to_string()));
        // ... more assertions
    }
    
    #[tokio::test]
    async fn test_async_compilation() {
        let compiler = Compiler::new();
        let result = compiler.compile_async("test input").await;
        assert!(result.is_ok());
    }
}
```

### Integration Tests
```rust
// tests/integration_test.rs
#[tokio::test]
async fn test_end_to_end_compilation() {
    let source = std::fs::read_to_string("examples/hello.tpp").unwrap();
    let compiler = Compiler::new();
    let result = compiler.compile(&source).unwrap();
    
    // Verify generated code compiles
    assert!(result.contains("async fn handler"));
}
```

## Performance Considerations

### Memory Management
```rust
// Good: Use references when possible
pub fn generate_code(ast: &Program, config: &CompilerConfig) -> Result<String> {
    // Work with references, not owned values
}

// Good: Use Cow for conditional ownership
use std::borrow::Cow;

pub fn format_error(message: &str) -> Cow<str> {
    if message.contains("ERROR") {
        Cow::Owned(format!("[ERROR] {}", message))
    } else {
        Cow::Borrowed(message)
    }
}
```

### Async Performance
```rust
// Good: Use join for parallel operations
use tokio::try_join;

async fn compile_multiple(sources: &[&str]) -> Result<Vec<String>> {
    let futures = sources.iter().map(|source| compile_single(source));
    let results = try_join!(futures)?;
    Ok(results)
}
```

## Logging & Observability

### Structured Logging
```rust
use tracing::{info, warn, error, instrument};

#[instrument(skip(self))]
pub async fn execute_function(&self, id: Uuid, event: Event) -> Result<Response> {
    info!(function_id = %id, "Starting function execution");
    
    match self.runtime.execute(id, event).await {
        Ok(response) => {
            info!(function_id = %id, duration_ms = response.duration, "Function completed");
            Ok(response)
        }
        Err(e) => {
            error!(function_id = %id, error = %e, "Function execution failed");
            Err(e)
        }
    }
}
```

## CLI Development

### Argument Parsing with Clap
```rust
use clap::{Parser, Subcommand};

#[derive(Parser)]
#[command(name = "talkppc")]
#[command(about = "Talk++ Compiler")]
struct Cli {
    #[command(subcommand)]
    command: Commands,
}

#[derive(Subcommand)]
enum Commands {
    Build {
        #[arg(short, long)]
        input: PathBuf,
        #[arg(short, long)]
        output: Option<PathBuf>,
        #[arg(short, long, default_value = "rust")]
        target: String,
    },
}
```

---
