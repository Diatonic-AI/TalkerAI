name: 🔐 Security Scanning & Compliance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always

jobs:
  secret-scan:
    name: 🕵️ Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for comprehensive scan

      - name: Run TruffleHog secret scanner
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks secret scanner
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  dependency-scan:
    name: 📦 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scan-type: [rust, nodejs]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rust Security Audit
        if: matrix.scan-type == 'rust'
        run: |
          cargo install cargo-audit
          cargo audit --deny warnings

      - name: Node.js Security Audit
        if: matrix.scan-type == 'nodejs'
        run: |
          npm install -g npm-audit-resolver
          find . -name package.json -not -path "*/node_modules/*" | while read file; do
            dir=$(dirname "$file")
            echo "Scanning $dir"
            cd "$dir"
            npm audit --audit-level=high
            cd - > /dev/null
          done

      - name: Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --all-projects

  container-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build container for scanning
        run: |
          docker build -f docker/Containerfile -t talk-plus-plus:scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'talk-plus-plus:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Hadolint Dockerfile linter
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: docker/Containerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: Upload Hadolint scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif

  sast-scan:
    name: 🔍 Static Application Security Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: rust, javascript

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build Rust components
        run: cargo build --release --all

      - name: Setup Node.js for JavaScript analysis
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Node.js dependencies
        run: |
          find . -name package.json -not -path "*/node_modules/*" | while read file; do
            dir=$(dirname "$file")
            echo "Installing dependencies in $dir"
            cd "$dir"
            npm install || true
            cd - > /dev/null
          done

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/rust
            p/javascript
            p/typescript
            p/docker
            p/kubernetes

  infrastructure-scan:
    name: 🏗️ Infrastructure Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov IaC scanner
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,kubernetes,terraform
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run kube-score on Kubernetes manifests
        run: |
          if [ -d "k8s" ]; then
            curl -L https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64.tar.gz | tar xz
            ./kube-score score k8s/**/*.yaml --output-format=json > kube-score-results.json || true
            echo "Kubernetes manifests security score results:"
            cat kube-score-results.json
          fi

  compliance-check:
    name: 📋 Compliance & Policy Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for required security files
        run: |
          echo "Checking for required security files..."
          
          # Check for security policy
          if [ ! -f "SECURITY.md" ]; then
            echo "❌ Missing SECURITY.md file"
            exit 1
          fi
          
          # Check for proper .gitignore
          if [ ! -f ".gitignore" ]; then
            echo "❌ Missing .gitignore file"
            exit 1
          fi
          
          # Check that secrets are properly gitignored
          if grep -r "sk-[a-zA-Z0-9]" . --exclude-dir=.git 2>/dev/null; then
            echo "❌ Potential secrets found in code"
            exit 1
          fi
          
          echo "✅ Security files check passed"

      - name: Validate Vault configuration
        run: |
          echo "Checking HashiCorp Vault configuration..."
          
          if [ -d "vault" ]; then
            # Validate vault policies
            find vault -name "*.hcl" | while read policy; do
              echo "Validating $policy"
              # Add vault policy validation here
            done
          fi
          
          echo "✅ Vault configuration validated"

      - name: Check container security best practices
        run: |
          echo "Checking container security practices..."
          
          # Check for non-root user in Containerfiles
          find . -name "Containerfile" -o -name "Dockerfile" | while read dockerfile; do
            if ! grep -q "USER " "$dockerfile"; then
              echo "⚠️  $dockerfile should specify a non-root USER"
            fi
            
            if grep -q "FROM.*:latest" "$dockerfile"; then
              echo "⚠️  $dockerfile uses 'latest' tag - specify exact versions"
            fi
          done

  license-scan:
    name: 📜 License Compliance Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-license
        run: cargo install cargo-license

      - name: Check Rust dependencies licenses
        run: |
          echo "Scanning Rust dependency licenses..."
          cargo license --json > rust-licenses.json
          
          # Check for incompatible licenses
          if grep -q "GPL" rust-licenses.json; then
            echo "⚠️  GPL licenses found - review compatibility"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Check Node.js dependencies licenses
        run: |
          find . -name package.json -not -path "*/node_modules/*" | while read file; do
            dir=$(dirname "$file")
            echo "Checking licenses in $dir"
            cd "$dir"
            license-checker --json > licenses.json || true
            cd - > /dev/null
          done

  security-report:
    name: 📊 Security Report Summary
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-scan, container-scan, sast-scan, infrastructure-scan, compliance-check, license-scan]
    if: always()

    steps:
      - name: Generate security report
        run: |
          echo "# 🔐 Security Scan Report" > security-report.md
          echo "" >> security-report.md
          echo "## Scan Results Summary" >> security-report.md
          echo "" >> security-report.md
          
          # Add status for each job
          echo "- Secret Detection: ${{ needs.secret-scan.result }}" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
          echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-report.md
          echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-report.md
          echo "- Compliance Check: ${{ needs.compliance-check.result }}" >> security-report.md
          echo "- License Scan: ${{ needs.license-scan.result }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "Generated on: $(date)" >> security-report.md
          echo "Commit: ${{ github.sha }}" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

      - name: Comment security report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            }); 