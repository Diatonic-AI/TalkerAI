name: ‚öõÔ∏è Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - 'frontend-server/**'
      - 'electron-app/**'
      - 'package*.json'
      - '.github/workflows/ci-frontend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - 'frontend-server/**'
      - 'electron-app/**'
      - 'package*.json'

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "store_path=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.store_path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: pnpm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  code-quality:
    name: üîç Code Quality & Linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: ['frontend', 'frontend-server', 'electron-app']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "store_path=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.store_path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: |
          cd ${{ matrix.workspace }}
          pnpm run lint

      - name: Run Prettier check
        run: |
          cd ${{ matrix.workspace }}
          pnpm run format:check

      - name: TypeScript type check
        run: |
          cd ${{ matrix.workspace }}
          pnpm run type-check

  test:
    name: üß™ Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: ['frontend', 'frontend-server', 'electron-app']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "store_path=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.store_path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: |
          cd ${{ matrix.workspace }}
          pnpm run test:unit

      - name: Run integration tests
        run: |
          cd ${{ matrix.workspace }}
          pnpm run test:integration

      - name: Generate test coverage
        run: |
          cd ${{ matrix.workspace }}
          pnpm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ${{ matrix.workspace }}/coverage/clover.xml
          flags: ${{ matrix.workspace }}-tests
          name: ${{ matrix.workspace }}-coverage

  build:
    name: üèóÔ∏è Build Applications
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test]
    strategy:
      matrix:
        workspace: ['frontend', 'frontend-server', 'electron-app']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "store_path=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.store_path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: |
          cd ${{ matrix.workspace }}
          pnpm run build

      - name: Bundle analyzer (React apps only)
        if: matrix.workspace == 'frontend' || matrix.workspace == 'electron-app'
        run: |
          cd ${{ matrix.workspace }}
          pnpm run analyze || echo "Bundle analyzer not available"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.workspace }}-build
          path: ${{ matrix.workspace }}/dist/
          retention-days: 30

  electron-build:
    name: üñ•Ô∏è Electron Desktop Build
    runs-on: ${{ matrix.os }}
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Electron app
        run: |
          cd electron-app
          pnpm run electron:build

      - name: Upload Electron artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-${{ matrix.os }}
          path: electron-app/dist/
          retention-days: 30

  container-build:
    name: üê≥ Frontend Container Build
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push React frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Containerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  e2e-tests:
    name: üé≠ End-to-End Tests
    runs-on: ubuntu-latest
    needs: [container-build]
    if: github.event_name == 'push'

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: talk_plus_plus_test
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Start application stack
        run: |
          docker-compose -f docker/docker-compose.yml up -d
          sleep 30 # Wait for services to start

      - name: Run E2E tests
        run: pnpm run test:e2e

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  deploy-frontend:
    name: üöÄ Deploy Frontend
    runs-on: ubuntu-latest
    needs: [container-build, e2e-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure HashiCorp Vault
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_URL }}
          method: jwt
          role: talk-plus-plus-frontend
          secrets: |
            secret/data/${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}/k8s kubeconfig | KUBE_CONFIG

      - name: Deploy to Kubernetes
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl apply -k k8s/overlays/${{ github.ref == 'refs/heads/main' && 'production' || 'dev' }}/frontend/
          kubectl rollout status deployment/frontend -n talk-plus-plus-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

      - name: Run frontend health checks
        run: |
          export KUBECONFIG=kubeconfig
          kubectl wait --for=condition=ready pod -l app=frontend -n talk-plus-plus-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }} --timeout=300s 