#!/bin/bash
# Pre-commit hook for Talk++ AI Middleware Platform
# ==================================================
# This hook runs before each commit to ensure code quality and security

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç Running pre-commit checks for Talk++ AI Middleware Platform${NC}"
echo "================================================================="

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Not in a git repository${NC}"
    exit 1
fi

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  No staged files found${NC}"
    exit 0
fi

echo -e "${BLUE}üìÅ Staged files:${NC}"
echo "$STAGED_FILES" | while read file; do echo "  - $file"; done
echo ""

# Initialize pass/fail tracking
CHECKS_PASSED=true

# Function to run a check and track results
run_check() {
    local check_name="$1"
    local command="$2"
    
    echo -e "${BLUE}üîç $check_name${NC}"
    if eval "$command"; then
        echo -e "${GREEN}‚úÖ $check_name passed${NC}"
    else
        echo -e "${RED}‚ùå $check_name failed${NC}"
        CHECKS_PASSED=false
    fi
    echo ""
}

# 1. Secret Detection
echo -e "${BLUE}üïµÔ∏è  Checking for secrets and sensitive data...${NC}"
if echo "$STAGED_FILES" | xargs grep -l "sk-[a-zA-Z0-9]" 2>/dev/null; then
    echo -e "${RED}‚ùå Potential API keys found in staged files${NC}"
    CHECKS_PASSED=false
else
    echo -e "${GREEN}‚úÖ No obvious secrets detected${NC}"
fi

# Check for other sensitive patterns
SENSITIVE_PATTERNS=(
    "password\s*=\s*['\"][^'\"]*['\"]"
    "token\s*=\s*['\"][^'\"]*['\"]"
    "secret\s*=\s*['\"][^'\"]*['\"]"
    "api_key\s*=\s*['\"][^'\"]*['\"]"
    "-----BEGIN (RSA )?PRIVATE KEY-----"
)

for pattern in "${SENSITIVE_PATTERNS[@]}"; do
    if echo "$STAGED_FILES" | xargs grep -i -E "$pattern" 2>/dev/null; then
        echo -e "${RED}‚ùå Potential sensitive data found: $pattern${NC}"
        CHECKS_PASSED=false
    fi
done
echo ""

# 2. Rust Code Quality Checks
RUST_FILES=$(echo "$STAGED_FILES" | grep "\.rs$" || true)
if [ -n "$RUST_FILES" ]; then
    echo -e "${BLUE}ü¶Ä Running Rust checks...${NC}"
    
    # Check if Cargo.toml exists
    if [ -f "Cargo.toml" ]; then
        # Format check
        run_check "Rust formatting" "cargo fmt --all -- --check"
        
        # Clippy lints
        run_check "Rust linting (Clippy)" "cargo clippy --all-targets --all-features -- -D warnings"
        
        # Security audit
        if command -v cargo-audit >/dev/null 2>&1; then
            run_check "Rust security audit" "cargo audit"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  cargo-audit not installed, skipping security audit${NC}"
        fi
        
        # Check for unwrap() usage (potential panics)
        if echo "$RUST_FILES" | xargs grep -n "\.unwrap()" 2>/dev/null; then
            echo -e "${YELLOW}‚ö†Ô∏è  Found .unwrap() calls - consider using proper error handling${NC}"
        fi
        
        # Check for println! in release code
        if echo "$RUST_FILES" | xargs grep -n "println!" 2>/dev/null; then
            echo -e "${YELLOW}‚ö†Ô∏è  Found println! calls - consider using proper logging${NC}"
        fi
    fi
fi

# 3. JavaScript/TypeScript Code Quality Checks
JS_FILES=$(echo "$STAGED_FILES" | grep -E "\.(js|ts|jsx|tsx)$" || true)
if [ -n "$JS_FILES" ]; then
    echo -e "${BLUE}‚öõÔ∏è  Running JavaScript/TypeScript checks...${NC}"
    
    # Check if package.json exists in any directory
    for dir in $(find . -name "package.json" -not -path "*/node_modules/*" -exec dirname {} \;); do
        if [ -d "$dir/node_modules" ]; then
            echo "Checking $dir..."
            cd "$dir"
            
            # ESLint
            if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
                run_check "ESLint ($dir)" "npm run lint 2>/dev/null || npx eslint . --ext .js,.ts,.jsx,.tsx"
            fi
            
            # Prettier
            if [ -f ".prettierrc" ] || [ -f "prettier.config.js" ]; then
                run_check "Prettier ($dir)" "npm run format:check 2>/dev/null || npx prettier --check ."
            fi
            
            # TypeScript type check
            if [ -f "tsconfig.json" ]; then
                run_check "TypeScript check ($dir)" "npm run type-check 2>/dev/null || npx tsc --noEmit"
            fi
            
            cd - > /dev/null
        fi
    done
fi

# 4. Container/Docker Checks
DOCKER_FILES=$(echo "$STAGED_FILES" | grep -E "(Containerfile|Dockerfile)" || true)
if [ -n "$DOCKER_FILES" ]; then
    echo -e "${BLUE}üê≥ Running container checks...${NC}"
    
    # Hadolint check
    if command -v hadolint >/dev/null 2>&1; then
        for dockerfile in $DOCKER_FILES; do
            run_check "Hadolint ($dockerfile)" "hadolint $dockerfile"
        done
    else
        echo -e "${YELLOW}‚ö†Ô∏è  hadolint not installed, skipping Dockerfile linting${NC}"
    fi
    
    # Check for security best practices
    for dockerfile in $DOCKER_FILES; do
        echo "Checking $dockerfile for security best practices..."
        
        if ! grep -q "USER " "$dockerfile"; then
            echo -e "${YELLOW}‚ö†Ô∏è  $dockerfile doesn't specify a non-root USER${NC}"
        fi
        
        if grep -q "FROM.*:latest" "$dockerfile"; then
            echo -e "${YELLOW}‚ö†Ô∏è  $dockerfile uses 'latest' tag - specify exact versions${NC}"
        fi
        
        if grep -q "ADD http" "$dockerfile"; then
            echo -e "${YELLOW}‚ö†Ô∏è  $dockerfile uses ADD with URL - consider using curl/wget in RUN${NC}"
        fi
    done
fi

# 5. Kubernetes/YAML Checks
YAML_FILES=$(echo "$STAGED_FILES" | grep -E "\.(yaml|yml)$" || true)
if [ -n "$YAML_FILES" ]; then
    echo -e "${BLUE}üìú Running YAML checks...${NC}"
    
    # YAML syntax validation
    for yaml_file in $YAML_FILES; do
        if command -v yq >/dev/null 2>&1; then
            run_check "YAML syntax ($yaml_file)" "yq eval . $yaml_file > /dev/null"
        elif command -v python3 >/dev/null 2>&1; then
            run_check "YAML syntax ($yaml_file)" "python3 -c 'import yaml; yaml.safe_load(open(\"$yaml_file\"))'"
        fi
    done
    
    # Kubernetes manifest validation
    K8S_FILES=$(echo "$YAML_FILES" | grep "k8s/" || true)
    if [ -n "$K8S_FILES" ] && command -v kubeval >/dev/null 2>&1; then
        for k8s_file in $K8S_FILES; do
            run_check "Kubernetes validation ($k8s_file)" "kubeval $k8s_file"
        done
    fi
fi

# 6. Terraform Checks
TF_FILES=$(echo "$STAGED_FILES" | grep "\.tf$" || true)
if [ -n "$TF_FILES" ]; then
    echo -e "${BLUE}üèóÔ∏è  Running Terraform checks...${NC}"
    
    if command -v terraform >/dev/null 2>&1; then
        run_check "Terraform format" "terraform fmt -check -recursive"
        run_check "Terraform validation" "terraform validate"
    fi
    
    if command -v tflint >/dev/null 2>&1; then
        run_check "TFLint" "tflint"
    fi
fi

# 7. File Size Check
echo -e "${BLUE}üìè Checking file sizes...${NC}"
LARGE_FILES=$(echo "$STAGED_FILES" | xargs ls -la 2>/dev/null | awk '$5 > 1048576 {print $9, "(" $5 " bytes)"}')
if [ -n "$LARGE_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Large files detected (>1MB):${NC}"
    echo "$LARGE_FILES"
    echo -e "${YELLOW}Consider using Git LFS for large files${NC}"
fi
echo ""

# 8. Commit Message Check (if available)
COMMIT_MSG_FILE=".git/COMMIT_EDITMSG"
if [ -f "$COMMIT_MSG_FILE" ]; then
    echo -e "${BLUE}üìù Checking commit message format...${NC}"
    COMMIT_MSG=$(head -n 1 "$COMMIT_MSG_FILE")
    
    # Check commit message format (conventional commits)
    if ! echo "$COMMIT_MSG" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|ci|perf)(\(.+\))?: .{1,50}"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Commit message doesn't follow conventional commit format${NC}"
        echo "Expected: type(scope): description"
        echo "Example: feat(auth): add OAuth2 integration"
    else
        echo -e "${GREEN}‚úÖ Commit message format looks good${NC}"
    fi
fi

# Final Result
echo "================================================================="
if [ "$CHECKS_PASSED" = true ]; then
    echo -e "${GREEN}üéâ All pre-commit checks passed! Proceeding with commit.${NC}"
    exit 0
else
    echo -e "${RED}‚ùå Some pre-commit checks failed. Please fix the issues and try again.${NC}"
    echo ""
    echo -e "${BLUE}üí° Tips:${NC}"
    echo "  - Run 'cargo fmt' to fix Rust formatting"
    echo "  - Run 'cargo clippy --fix' to fix Rust lints"
    echo "  - Run 'npm run lint:fix' to fix JavaScript/TypeScript issues"
    echo "  - Use 'git commit --no-verify' to skip these checks (not recommended)"
    exit 1
fi 